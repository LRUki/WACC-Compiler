Index: test/wacc/frontend/FrontendTest.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- test/wacc/frontend/FrontendTest.kt	(date 1611932312456)
+++ test/wacc/frontend/FrontendTest.kt	(date 1611932312456)
@@ -0,0 +1,24 @@
+package wacc.frontend
+
+import antlr.BasicLexer
+import antlr.BasicParser
+import org.antlr.v4.runtime.CharStreams
+import org.antlr.v4.runtime.CommonTokenStream
+import org.hamcrest.CoreMatchers.`is`
+import org.hamcrest.MatcherAssert.assertThat
+import org.junit.Test
+
+class FrontendTest {
+    @Test
+    fun `can parse simple expr`() {
+        val input = CharStreams.fromString("1+2")
+        val lexer = BasicLexer(input)
+        val tokens = CommonTokenStream(lexer)
+        val parser = BasicParser(tokens)
+        val tree = parser.prog()
+
+        assertThat(tree.getChild(0).getChild(0).text, `is`("1"))
+        assertThat(tree.getChild(1).text, `is`("+"))
+        assertThat(tree.getChild(2).getChild(0).text, `is`("2"))
+    }
+}
\ No newline at end of file
Index: src/wacc/frontend/Main.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package wacc.frontend\r\n\r\nimport antlr.BasicLexer\r\nimport antlr.BasicParser\r\nimport org.antlr.v4.runtime.CharStreams\r\nimport org.antlr.v4.runtime.CommonTokenStream\r\n\r\nfun main() {\r\n    println(\"Input: \")\r\n\r\n    val input = CharStreams.fromStream(System.`in`)\r\n    val lexer = BasicLexer(input)\r\n    val tokens = CommonTokenStream(lexer)\r\n    val parser = BasicParser(tokens)\r\n    val tree = parser.prog()\r\n\r\n    println(tree.toStringTree())\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/wacc/frontend/Main.kt	(revision 5a90f182fc5ffb9f438b5055d1c355106ca62dcb)
+++ src/wacc/frontend/Main.kt	(date 1611931814332)
@@ -14,5 +14,4 @@
     val parser = BasicParser(tokens)
     val tree = parser.prog()
 
-    println(tree.toStringTree())
 }
\ No newline at end of file
