#!/bin/bash

echo 'Testing assemble...'
make
rm -rf out_test


ALL_SUCESS_COUNT=0
ALL_FAIL_COUNT=0


for FOLDER in `find ./wacc_examples/valid -type d -mindepth 1 -maxdepth 1`
do
  echo "--------------------------------------------------------------------"
  echo "Testing $FOLDER "
  echo "--------------------------------------------------------------------"
  SUCCESSFUL=0
  SUCESS_COUNT=0
  FAIL_COUNT=0
  for WACC_FILENAME in `find $FOLDER -type f -iname "*.wacc" -exec sh -c 'printf "%s\n" "${0%.*}"' {} ';'`
  do
    # echo $WACC_FILENAME
    FILENAME=${WACC_FILENAME#*/*/}
    # echo $FILENAME
    mkdir -p out_test/"${FILENAME%/*}"
    java -jar wacc-1.0-SNAPSHOT.jar wacc_examples/"$FILENAME".wacc out_test/"$FILENAME".s

    if arm-linux-gnueabi-gcc -o out_test/"$FILENAME" -mcpu=arm1176jzf-s -mtune=arm1176jzf-s "out_test/${FILENAME}.s"
    then
      ASSEMBLE_SUCCESSFUL=0

      INPUT="/dev/null"
      if [ -f out_examples/"$FILENAME".in ]
      then
        INPUT=out_examples/"$FILENAME".in
      fi

      if [ ! -f out_examples/"$FILENAME".out ]
      then
        echo "Skipping ${FILENAME}"
        continue
      fi

      timeout 5 qemu-arm -L /usr/arm-linux-gnueabi out_test/"$FILENAME" <"$INPUT" | diff out_examples/"$FILENAME".out - | head -n50
      PIPE_RESULT="${PIPESTATUS[0]} ${PIPESTATUS[1]}"
      EXITCODE=$(echo "$PIPE_RESULT" | cut -d' ' -f 1)

      OUTPUT_MATCHES=$(echo "$PIPE_RESULT" | cut -d' ' -f 2)
      if [ ! -z $(grep "$FILENAME"'$' "testassembleskip.txt") ]
      then
        OUTPUT_MATCHES=0
        echo "Assume ${FILENAME} correct."
      fi

      echo "$EXITCODE" | diff - out_examples/"$FILENAME".exitcode
      EXITCODE_MATCHES=$?
    else
      ASSEMBLE_SUCCESSFUL=1
    fi

    if [ "$ASSEMBLE_SUCCESSFUL" == 0 ] && [ "$OUTPUT_MATCHES" == 0 ] && [ "$EXITCODE_MATCHES" == 0 ]
    then
      echo "Success ${FILENAME}"
      SUCESS_COUNT=$((SUCESS_COUNT+1))
    else
      echo "Failed ${FILENAME}"
      FAIL_COUNT=$((FAIL_COUNT+1))
      SUCCESSFUL=1
    fi
  done
  echo ""
  if [ $SUCCESSFUL == 0 ]
  then
    echo "All Successful!"
  fi
  echo "Passed $SUCESS_COUNT"
  echo "Failed $FAIL_COUNT"
  ALL_SUCESS_COUNT=$((ALL_SUCESS_COUNT+ SUCESS_COUNT))
  ALL_FAIL_COUNT=$((ALL_FAIL_COUNT + FAIL_COUNT))

done

echo "--------------------------------------------------------------------"
echo "Passed $ALL_SUCESS_COUNT / $((ALL_FAIL_COUNT + ALL_SUCESS_COUNT))"
if [ "$ALL_FAIL_COUNT" != 0 ]
then
#  exit 1
fi
