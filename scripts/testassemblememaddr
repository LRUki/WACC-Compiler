#!/bin/bash

cd ../
echo 'Testing assemble (wacc files that print memory addresses)...'
make
rm -rf out_test

SKIPFILE_FILENAME="testassemble.skip"

LINES=$(cat $SKIPFILE_FILENAME)

echo "----------------------------------------------------------------"
for FILENAME in $LINES
do
  mkdir -p out_test/"${FILENAME%/*}"
  java -jar wacc-1.0-SNAPSHOT.jar wacc_examples/"$FILENAME".wacc out_test/"$FILENAME".s

  if arm-linux-gnueabi-gcc -o out_test/"$FILENAME" -mcpu=arm1176jzf-s -mtune=arm1176jzf-s "out_test/${FILENAME}.s"
  then
    ASSEMBLE_SUCCESSFUL=0

    INPUT="/dev/null"
    if [ -f out_examples/"$FILENAME".in ]
    then
      INPUT=out_examples/"$FILENAME".in
    fi

    if [ ! -f out_examples/"$FILENAME".out ]
    then
      echo "Skipping ${FILENAME}"
      continue
    fi

    timeout 5 qemu-arm -L /usr/arm-linux-gnueabi out_test/"$FILENAME" <"$INPUT" | diff out_examples/"$FILENAME".out - | head -n50
    PIPE_RESULT="${PIPESTATUS[0]} ${PIPESTATUS[1]}"
    EXITCODE=$(echo "$PIPE_RESULT" | cut -d' ' -f 1)

    OUTPUT_MATCHES=$(echo "$PIPE_RESULT" | cut -d' ' -f 2)
    if [ ! -z $(grep "$FILENAME"'$' "testassemble.skip") ]
    then
      OUTPUT_MATCHES=0
      echo "Assume ${FILENAME} correct."
    fi

    echo "$EXITCODE" | diff - out_examples/"$FILENAME".exitcode
    EXITCODE_MATCHES=$?
  else
    ASSEMBLE_SUCCESSFUL=1
  fi

  if [ "$ASSEMBLE_SUCCESSFUL" == 0 ] && [ "$OUTPUT_MATCHES" == 0 ] && [ "$EXITCODE_MATCHES" == 0 ]
  then
    echo "Success ${FILENAME}"
    SUCESS_COUNT=$((SUCESS_COUNT+1))
  else
    echo "Failed ${FILENAME}"
    FAIL_COUNT=$((FAIL_COUNT+1))
    ALL_SUCCESSFUL=1
  fi

  echo "----------------------------------------------------------------"

done
